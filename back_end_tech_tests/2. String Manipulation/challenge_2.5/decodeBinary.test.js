const decodeBinary = require("./decodeBinary.js");

describe("Decode Binary Message", () => {
    test("Returns an empty string when passed an empty string", () => {
        expect(decodeBinary("")).toBe("");
    })

    test("Returns correct letter for a binary character", () => {
        expect(decodeBinary("00001")).toBe("a");
        expect(decodeBinary("00101")).toBe("e");
        expect(decodeBinary("01101")).toBe("m");
    })

    test("Returns the correct word when given in binary", () => {
        expect(decodeBinary("0110100101")).toBe("me");
        expect(decodeBinary("10100010010110100101")).toBe("time");
        expect(decodeBinary("0111001111100101010001000000110111100100001011001010011")).toBe("northcoders");
    })

    test("Returns the correct phrase when passed a sentence in binary", () => {
        expect(decodeBinary("10111001010110000011011110110100101110111010001111110110111001111100101010001000000110111100100001011001010011"))
        .toBe("welcome to northcoders");
        expect(decodeBinary
        .toBe("this is going to be a very large string so you better be sure that you are containing all the letters including j and k and x and z and any other letters i might have missed like f   good luck");
    })

    test("Works for absolute nonsense", () => {
        expect(decodeBinary
        .toBe("fhdealbfuirelbhsgjlr fhdiu alvhjdf aklvhjdfkszl ghjfeksl vbdfjk lvghdfjzvl bdfhzklgbdfhzvl bdaklbdkjcvblsidrzxlk dhvudizlfhkdlx dbvkl cvbhueklxzfbdvjkasbgrlsvdjfk bev sjzkrxdl bvsjkzxdlbj hudi afhuihba hcnjl z f n c bd eunfdjaeigb q uheubaz dszjhmz nvhdjweak lw gafyubhjks afdhjwkabfhjelbhzjbfhdjakfb hsua bhajwkbhlhqupguerkz uhibb vdkxlvd")
    })
})